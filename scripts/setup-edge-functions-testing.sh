#!/bin/bash

# Edge Functions Testing Setup Script
# Quick setup for comprehensive Edge Functions testing
# Usage: ./scripts/setup-edge-functions-testing.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Edge Functions Testing Setup${NC}"
echo "=================================="
echo "Setting up comprehensive testing environment..."
echo "=================================="

# Check prerequisites
echo -e "\n${YELLOW}🔍 Checking prerequisites...${NC}"

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo -e "${RED}❌ Supabase CLI not found${NC}"
    echo "Install it with: npm install -g supabase"
    exit 1
fi
echo -e "${GREEN}✅ Supabase CLI found${NC}"

# Check if Deno is installed
if ! command -v deno &> /dev/null; then
    echo -e "${RED}❌ Deno not found${NC}"
    echo "Install it from: https://deno.land/manual/getting_started/installation"
    exit 1
fi
echo -e "${GREEN}✅ Deno found${NC}"

# Check if curl is available
if ! command -v curl &> /dev/null; then
    echo -e "${RED}❌ curl not found${NC}"
    echo "Install curl for HTTP testing"
    exit 1
fi
echo -e "${GREEN}✅ curl found${NC}"

# Check if bc is available (for calculations)
if ! command -v bc &> /dev/null; then
    echo -e "${YELLOW}⚠️  bc not found - installing for calculations...${NC}"
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y bc
    elif command -v yum &> /dev/null; then
        sudo yum install -y bc
    elif command -v brew &> /dev/null; then
        brew install bc
    else
        echo -e "${YELLOW}⚠️  Please install 'bc' manually for performance calculations${NC}"
    fi
fi

# Start local Supabase if not running
echo -e "\n${YELLOW}🔄 Checking Supabase status...${NC}"
if ! supabase status &> /dev/null; then
    echo -e "${YELLOW}⚠️  Local Supabase not running. Starting it now...${NC}"
    supabase start
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}❌ Failed to start local Supabase${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ Local Supabase started${NC}"
else
    echo -e "${GREEN}✅ Local Supabase is running${NC}"
fi

# Deploy Edge Functions locally
echo -e "\n${YELLOW}📦 Deploying Edge Functions locally...${NC}"
if [[ -f "scripts/deploy-all-functions.sh" ]]; then
    bash scripts/deploy-all-functions.sh --local
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}✅ Edge Functions deployed locally${NC}"
    else
        echo -e "${YELLOW}⚠️  Some functions may have failed to deploy${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  Deployment script not found, deploying manually...${NC}"
    
    # List of functions to deploy
    FUNCTIONS=(
        "subscription-status"
        "quote-processor"
        "quote-pdf-generator"
        "webhook-handler"
        "batch-processor"
        "webhook-monitor"
        "monitoring-alerting"
        "performance-optimizer"
        "connection-pool-manager"
        "migration-controller"
        "production-validator"
        "security-hardening"
        "global-deployment-optimizer"
    )
    
    deployed_count=0
    for func in "${FUNCTIONS[@]}"; do
        if [[ -d "supabase/functions/$func" ]]; then
            echo "   Deploying $func..."
            if supabase functions deploy "$func" --local &> /dev/null; then
                echo -e "   ${GREEN}✅ $func deployed${NC}"
                ((deployed_count++))
            else
                echo -e "   ${YELLOW}⚠️  $func failed to deploy${NC}"
            fi
        else
            echo -e "   ${YELLOW}⚠️  $func directory not found${NC}"
        fi
    done
    
    echo -e "${GREEN}✅ Deployed $deployed_count/${#FUNCTIONS[@]} functions${NC}"
fi

# Run quick health check
echo -e "\n${YELLOW}🏥 Running quick health check...${NC}"
if [[ -f "tests/realistic-local-tests.ts" ]]; then
    if deno run --allow-all tests/realistic-local-tests.ts --health-check; then
        echo -e "${GREEN}✅ Health check passed${NC}"
    else
        echo -e "${YELLOW}⚠️  Some functions may not be responding correctly${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  Health check script not found${NC}"
fi

# Create test environment file
echo -e "\n${YELLOW}📝 Creating test environment configuration...${NC}"
cat > .env.test << EOF
# Edge Functions Testing Configuration
# Generated by setup script on $(date)

# Local testing URLs
LOCAL_SUPABASE_URL=http://localhost:54321
LOCAL_FUNCTIONS_URL=http://localhost:54321/functions/v1

# Test JWT token (for local testing only)
TEST_JWT_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzM5NDk2MDAwLCJpYXQiOjE3Mzk0MDk2MDAsImlzcyI6Imh0dHA6Ly8xMjcuMC4wLjE6NTQzMjEvYXV0aC92MSIsInN1YiI6IjBhOGI4Y2U3LTNjYzMtNDc2ZS1iODIwLTIyOTZkZjIxMTljZiIsImVtYWlsIjoiY2FybG9zQGFpLnJpby5iciIsInBob25lIjoiIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwiLCJwcm92aWRlcnMiOlsiZW1haWwiXX0sInVzZXJfbWV0YWRhdGEiOnt9LCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFhbCI6ImFhbDEiLCJhbXIiOlt7Im1ldGhvZCI6InBhc3N3b3JkIiwidGltZXN0YW1wIjoxNzM5NDA5NjAwfV0sInNlc3Npb25faWQiOiIwYThiOGNlNy0zY2MzLTQ3NmUtYjgyMC0yMjk2ZGYyMTE5Y2YifQ.test-jwt-token

# Testing configuration
TEST_TIMEOUT_MS=10000
TEST_CONCURRENT_REQUESTS=10
TEST_DURATION_SECONDS=30

EOF

echo -e "${GREEN}✅ Test environment configuration created (.env.test)${NC}"

# Display testing commands
echo -e "\n${BLUE}🎯 Available Testing Commands${NC}"
echo "============================="
echo ""
echo -e "${GREEN}Local Development Testing:${NC}"
echo "  npm run edge-functions:test:local           # Test all functions locally"
echo "  npm run edge-functions:test:health          # Quick health check"
echo "  npm run edge-functions:deploy:local         # Deploy all functions locally"
echo ""
echo -e "${GREEN}Production Testing:${NC}"
echo "  npm run edge-functions:test:production      # Test production deployment"
echo "  npm run edge-functions:deploy:production    # Deploy to production"
echo "  npm run edge-functions:deploy:test          # Deploy + test production"
echo ""
echo -e "${GREEN}Performance Testing:${NC}"
echo "  npm run edge-functions:test:performance     # Load testing"
echo "  npm run edge-functions:test:connection-pool # Connection pool testing"
echo ""
echo -e "${GREEN}Comprehensive Testing:${NC}"
echo "  npm run edge-functions:test:full            # Full test suite"
echo "  npm run edge-functions:test:critical        # Critical functions only"
echo ""
echo -e "${GREEN}Manual Testing:${NC}"
echo "  Visit: http://localhost:3000/test-edge-functions"
echo ""

# Display next steps
echo -e "${BLUE}📋 Next Steps${NC}"
echo "============="
echo ""
echo "1. Run local tests:"
echo "   npm run edge-functions:test:local"
echo ""
echo "2. Open the visual test dashboard:"
echo "   http://localhost:3000/test-edge-functions"
echo ""
echo "3. For production deployment:"
echo "   - Set SUPABASE_PROJECT_ID environment variable"
echo "   - Set SUPABASE_ANON_KEY environment variable"
echo "   - Run: npm run edge-functions:deploy:test"
echo ""
echo "4. For performance testing:"
echo "   npm run edge-functions:test:performance"
echo ""

# Final status
echo -e "\n${GREEN}🎉 Edge Functions Testing Setup Complete!${NC}"
echo "=========================================="
echo ""
echo -e "✅ Prerequisites checked"
echo -e "✅ Local Supabase running"
echo -e "✅ Edge Functions deployed locally"
echo -e "✅ Test environment configured"
echo -e "✅ Testing scripts ready"
echo ""
echo -e "${BLUE}Ready for comprehensive Edge Functions testing!${NC}"
